################################################################################
#
# Makefile to compile and link C programs with MPI subroutines. Version valid
# for Linux machines with GNU make.
#
# "make" compiles and links the specified main programs and modules, using the
# specified libraries (if any), and produces the executables.
#
# "make clean" removes all files generated by "make".
#
# Dependencies on included files are automatically taken care of.
#
################################################################################

COMPILE_SETTINGS=compile_settings.txt

LOAD_PAR_FROM_FILE = $(shell grep $(1) $(COMPILE_SETTINGS)| grep -v '\#' | awk '{print$$2;}')


CFLAGS:=$(shell grep CFLAGS $(COMPILE_SETTINGS)| grep -v '\#' | awk '{for (i=2; i<=NF; i++) print FS$$i;}')
NPROC0:=$(call LOAD_PAR_FROM_FILE, NPROC0_TOT ) 
NPROC1:=$(call LOAD_PAR_FROM_FILE, NPROC1_TOT ) 
NPROC2:=$(call LOAD_PAR_FROM_FILE, NPROC2_TOT ) 
NPROC3:=$(call LOAD_PAR_FROM_FILE, NPROC3_TOT ) 
L0:=$(call LOAD_PAR_FROM_FILE, L0 ) 
L1:=$(call LOAD_PAR_FROM_FILE, L1 ) 
L2:=$(call LOAD_PAR_FROM_FILE, L2 ) 
L3:=$(call LOAD_PAR_FROM_FILE, L3 ) 
NPROC0_BLK:=$(call LOAD_PAR_FROM_FILE, NPROC0_BLK ) 
NPROC1_BLK:=$(call LOAD_PAR_FROM_FILE, NPROC1_BLK ) 
NPROC2_BLK:=$(call LOAD_PAR_FROM_FILE, NPROC2_BLK ) 
NPROC3_BLK:=$(call LOAD_PAR_FROM_FILE, NPROC3_BLK ) 

GCC:=$(shell grep GCC $(COMPILE_SETTINGS)| grep -v '\#' | awk '{print$$2;}')
MPI_HOME:=$(shell grep MPI_HOME $(COMPILE_SETTINGS)| grep -v '\#' | awk '{print$$2;}')
MPI_INCLUDE:=$(shell grep MPI_INCLUDE $(COMPILE_SETTINGS)| grep -v '\#' | awk '{print$$2;}')
CODELOC:=$(shell grep CODELOC $(COMPILE_SETTINGS)| grep -v '\#' | awk '{print$$2;}')
# CC should point to the right version of mpicc, mpiicc or whatever, anyway it should be
# the correct mpi wrapper.
# Usually, $MPI_HOME/bin/mpicc
# Notice that using the 'CC' tag in compile settings would not work because 
# it would trigger also with GCC, so we use 'COMPILER' instead
CC:=$(shell grep COMPILER $(COMPILE_SETTINGS)| grep -v '\#' | awk '{print$$2;}')

ifeq ($(CODELOC),)
	CODELOC=..
endif



$(info Code directory : $(CODELOC))
$(info Parameters load from $(COMPILE_SETTINGS))
$(info Lines CONTAINING '#' are ignored )
$(info CFLAGS       =    $(CFLAGS),)
$(info NPROC0       =    $(NPROC0),)
$(info NPROC1       =    $(NPROC1),)
$(info NPROC2       =    $(NPROC2),)
$(info NPROC3       =    $(NPROC3),)
$(info L0           =    $(L0),)
$(info L1           =    $(L1),)
$(info L2           =    $(L2),)
$(info L3           =    $(L3),)
$(info NPROC0_BLK   =    $(NPROC0_BLK),)
$(info NPROC1_BLK   =    $(NPROC1_BLK),)
$(info NPROC2_BLK   =    $(NPROC2_BLK),)
$(info NPROC3_BLK   =    $(NPROC3_BLK),)
$(info GCC          =    $(GCC),)
$(info MPI_HOME     =    $(MPI_HOME),)
$(info MPI_INCLUDE  =    $(MPI_INCLUDE),)


all: rmxeq mkdep mkxeq
.PHONY: all


# main programs and modules to be compiled

MAIN = qcd1 ms1 ms2 ms3 ms4

TIMING_DIRAC = time1 time2 time3 time4 
CHECK_DIRAC = check1 check2 check3 check4 check5 check6 check7 check8 check9 

ARCHIVE = archive sarchive

BLOCK = block blk_grid map_u2blk map_sw2blk map_s2blk

DFL = dfl_geometry dfl_subspace ltl_gcr dfl_sap_gcr dfl_modes

DIRAC = Dw_dble Dw Dw_bnd

FLAGS = flags action_parms dfl_parms force_parms hmc_parms lat_parms \
        mdint_parms rat_parms rw_parms sap_parms solver_parms smearing_parms

FORCES = force0 force1 force2 force3 force4 force5 \
         frcfcts genfrc tmcg tmcgm xtensor

LATTICE = bcnds uidx ftidx geometry

LINALG = salg salg_dble valg valg_dble liealg cmatrix_dble cmatrix

LINSOLV = cgne mscg fgcr fgcr4vd

LITTLE = Aw_gen Aw_com Aw_ops Aw_dble Aw ltl_modes

MDFLDS = mdflds fcom

RANDOM = ranlux ranlxs ranlxd gauss ranlux_site

RATFCTS = elliptic zolotarev ratfcts

SAP = sap_com sap_gcr sap blk_solv

SFLDS = sflds scom sdcom Pbnd Pbnd_dble

SMEARING = force_unsmearing smeared_fields smeared_fields_communication \
					 stout_smearing

SU3FCTS = chexp su3prod su3ren cm3x3 random_su3

SW_TERM = pauli pauli_dble swflds sw_term

TCHARGE = ftcom ftensor tcharge ym_action

UFLDS = plaq_sum uflds udcom bstap

UPDATE = chrono mdsteps counters mdint hmc rwtm rwtmeo rwrat

UTILS = endian error hsum mutils utils wspace

VFLDS = vflds vinit vcom vdcom

WFLOW = wflow

MODULES = $(ARCHIVE) $(BLOCK) $(DFL) $(DIRAC) $(FLAGS) $(FORCES) \
          $(LATTICE) $(LINALG) $(LINSOLV) $(LITTLE) $(MDFLDS) $(RANDOM) \
          $(RATFCTS) $(SAP) $(SFLDS) $(SMEARING) $(SU3FCTS) $(SW_TERM) \
					$(TCHARGE) $(UFLDS) $(UPDATE) $(UTILS) $(VFLDS) $(WFLOW)


# Logging option (-mpilog or -mpitrace or -mpianim)

LOGOPTION =


# search path for modules

MDIR = $(CODELOC)/modules
MAINDIR = $(CODELOC)/main
TEST_DIRACDIR = $(CODELOC)/devel/dirac

VPATH = .:$(MDIR)/flags:$(MDIR)/lattice:$(MDIR)/archive:$(MDIR)/linalg:\
          $(MDIR)/random:$(MDIR)/uflds:$(MDIR)/mdflds:$(MDIR)/su3fcts:\
					$(MDIR)/utils:$(MDIR)/forces:$(MDIR)/sflds:$(MDIR)/stout_smearing:\
					$(MDIR)/dirac:$(MDIR)/sw_term:$(MDIR)/tcharge:$(MDIR)/block:\
					$(MDIR)/sap:$(MDIR)/linsolv:$(MDIR)/dfl:$(MDIR)/vflds:$(MDIR)/little:\
					$(MDIR)/update:$(MDIR)/wflow:$(MDIR)/ratfcts:$(MAINDIR):\
					$(TEST_DIRACDIR)


# additional include directories

INCPATH = $(MPI_INCLUDE) $(CODELOC)/include


# additional libraries

LIBS = m

LIBPATH = $(MPI_HOME)/lib


# scheduling and optimization options

#CFLAGS = -std=c89 -O -DQPX


# debugging flags (add to CFLAGS if needed)

# -DCGNE_DBG -DFGCR_DBG -FGCR4VD_DBG -DMSCG_DBG
# -DDFL_MODES_DBG -DMDINT_DBG -DRWRAT_DBG


############################## do not change ###################################


SHELL=/bin/bash
CLINKER=$(CC)

PGMS= $(MAIN) $(MODULES) $(TIMING_DIRAC) $(CHECK_DIRAC) 

-include $(addsuffix .d,$(PGMS))

# rule to make dependencies

$(addsuffix .d,$(PGMS)): %.d: %.c Makefile
	@ $(GCC) -ansi -DNPROC0=$(NPROC0) -DNPROC1=$(NPROC1) -DNPROC2=$(NPROC2) -DNPROC3=$(NPROC3) -DL0=$(L0) -DL1=$(L1) -DL2=$(L2) -DL3=$(L3) -DNPROC0_BLK=$(NPROC0_BLK) -DNPROC1_BLK=$(NPROC1_BLK) -DNPROC2_BLK=$(NPROC2_BLK) -DNPROC3_BLK=$(NPROC3_BLK) $< -MM $(addprefix -I,$(INCPATH)) -o  $@	





# rule to compile source programs

$(addsuffix .o,$(PGMS)): %.o: %.c  Makefile $(COMPILE_SETTINGS)
	$(CC) -DNPROC0=$(NPROC0) -DNPROC1=$(NPROC1) -DNPROC2=$(NPROC2) -DNPROC3=$(NPROC3) -DL0=$(L0) -DL1=$(L1) -DL2=$(L2) -DL3=$(L3) -DNPROC0_BLK=$(NPROC0_BLK) -DNPROC1_BLK=$(NPROC1_BLK) -DNPROC2_BLK=$(NPROC2_BLK) -DNPROC3_BLK=$(NPROC3_BLK) $< -c $(CFLAGS) $(LOGOPTION) $(addprefix -I,$(INCPATH))


# rule to link object files

$(MAIN): %: %.o $(addsuffix .o,$(MODULES)) Makefile
	$(CLINKER) $< $(addsuffix .o,$(MODULES)) $(CFLAGS) $(LOGOPTION) \
		$(addprefix -L,$(LIBPATH)) $(addprefix -l,$(LIBS)) -o $@	

$(TIMING_DIRAC): %: %.o $(addsuffix .o,$(MODULES)) Makefile
	$(CLINKER) $< $(addsuffix .o,$(MODULES)) $(CFLAGS) $(LOGOPTION) \
		$(addprefix -L,$(LIBPATH)) $(addprefix -l,$(LIBS)) -o $@	

$(CHECK_DIRAC): %: %.o $(addsuffix .o,$(MODULES)) Makefile
	$(CLINKER) $< $(addsuffix .o,$(MODULES)) $(CFLAGS) $(LOGOPTION) \
		$(addprefix -L,$(LIBPATH)) $(addprefix -l,$(LIBS)) -o $@	

# produce executables

mkxeq: $(MAIN) $(TIMING_DIRAC) $(CHECK_DIRAC) 


# remove old executables

rmxeq:
	@ -rm -f $(MAIN) $(TIMING_DIRAC) $(CHECK_DIRAC) ; \
        echo "delete old executables"


# make dependencies

mkdep:  $(addsuffix .d,$(PGMS))
	@ echo "generate tables of dependencies"


# clean directory

clean:
	@ -rm -rf *.d *.o *.alog *.clog *.slog $(MAIN) $(TIMING_DIRAC) $(CHECK_DIRAC)
.PHONY: clean

################################################################################
